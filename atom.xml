<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wyatt Lindsey</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-01T05:46:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wyatt Lindsey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Roll your own promisify function</title>
    <link href="http://yoursite.com/2016/11/30/roll-your-own-promisify-function/"/>
    <id>http://yoursite.com/2016/11/30/roll-your-own-promisify-function/</id>
    <published>2016-11-30T08:40:25.000Z</published>
    <updated>2016-12-01T05:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>We have several choices when it comes to JavaScript promise libraries.  Some include a <code>promisify</code> feature that allows you to turn regular callback-style asynchronous functions into promises.  Additionally, NPM hosts <a href="https://www.npmjs.com/browse/keyword/promisify" target="_blank" rel="external">numerous Node modules</a> that promisify functions.  So why would we want to create our own?</p>
<p>Rolling our own version will deepen our understanding of how promisification, and ultimately promises themselves, work.  Also, knowing how to write a custom variant just might come in handy when other modules don’t deliver the desired results.  We’ll look at promisifying node-style callback functions, but the general principles apply other potential scenarios.</p>
<p>First let’s review some of the reasoning behind using promises.  If you’re familiar with this pattern, skip to <a href="#building-up-promisify">Building up <code>promisify</code></a>.</p>
<h2 id="Callbacks-and-promises"><a href="#Callbacks-and-promises" class="headerlink" title="Callbacks and promises"></a>Callbacks and promises</h2><p>Most JavaScript and Node.js developers are familiar with callbacks:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">someAsyncFunction(arg1, arg2, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with `data`</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>In this example, we’re passing a function into <code>someAsyncFunction</code> as the final argument.  Why can’t we simply return the results after the function does its work?  This function, like many in Node and other event-driven systems, does perform that work.  However, we don’t know when it will finish and we don’t want to lock up the application’s single thread while waiting.</p>
<p>Instead, we pass in a callback, a function that will be invoked by <code>someAsyncFunction</code> at an undetermined time in the future.  After that time we can work with the data, which in this case is passed into the callback as the argument <code>data</code>.  We might even invoke more async functions within that callback, in turn specifying more callbacks to fire when subsequent operations complete.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">someAsyncFunction(arg1, arg2, <span class="function"><span class="keyword">function</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">  anotherAsyncFunction(data, <span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">    moreAsyncWork(<span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">      <span class="comment">// eventually this function runs, invoked with `bar`</span></div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This simple example doesn’t include logic within each callback, but you can imagine how this approach might quickly become difficult to read, debug or determine the order of execution.</p>
<p>Promises attempt to improve this situation by abstracting the callback pattern into something more readable.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">someAsyncFunction(arg1, arg2)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">foo</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> anotherAsyncFunction(foo);</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> moreAsyncWork(bar);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>Here we see several improvements in readability:</p>
<ol>
<li>Flattened code indentation with less nesting.</li>
<li>No passing functions as arguments.</li>
<li>Intuitive semantics using <code>.then()</code> to represent event sequence.</li>
</ol>
<h2 id="Building-up-Promisify"><a href="#Building-up-Promisify" class="headerlink" title=" Building up Promisify"></a><a name="building-up-promisify"></a> Building up <code>Promisify</code></h2><h3 id="The-Node-style-pattern"><a href="#The-Node-style-pattern" class="headerlink" title="The Node-style pattern"></a>The Node-style pattern</h3><p>Now that we’ve reviewed how promises are used, let’s progressively create a factory that will take in a function and return a version that leverages promises.  More specifically, we’ll transform a function that follows the node callback pattern:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodeStyleFunction</span>(<span class="params">arg1, arg2, function(err, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// handle error, work with data</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This error-first argument pattern is what distinguishes node-style function callbacks.  The asynchronous outer function eventually invokes the supplied callback, which takes in:</p>
<ul>
<li>an <em>error</em> argument, usually set to <code>null</code> if nothing went wrong</li>
<li><p>response data, passed in as the second argument</p>
<p>###Foundation function</p>
</li>
</ul>
<p>So what exactly does this function need to perform?  For starters, it should:</p>
<ul>
<li>Take in a node-style async function.</li>
<li>Return a function that follows the promise pattern.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">nodeStyleFunction</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This provides a skeleton but the function we return needs to return a promise.  The exact preparation of the promise varies between libraries.  We’ll use the method for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">native ES6</a> and <a href="http://bluebirdjs.com/docs/api/promise.promisify.html" target="_blank" rel="external">Bluebird</a> promises.  These require the following steps:</p>
<ul>
<li>Instantiate a new <code>Promise</code>.</li>
<li>Pass in a function that accepts a <code>resolve</code> and a <code>reject</code> parameter.</li>
<li>Return the <code>Promise</code> instance.</li>
</ul>
<p>The function we pass into the <code>Promise</code> constructor will be run later,  but the promise itself returns immediately.  This object allows the user to chain methods like <code>.then</code>, <code>.catch</code>, <code>.finally</code> onto the it.  Here’s how the instantiation will look in <code>promisify</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">nodeStyleFunction</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Invoking-the-wrapped-function"><a href="#Invoking-the-wrapped-function" class="headerlink" title="Invoking the wrapped function"></a>Invoking the wrapped function</h3><p>We’ve built the foundation for <code>promisify</code>, returning a promise object with the correct function wrapper.  Now we need to actually invoke the function we’re wrapping.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    return <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      nodeStyleFunction();</div><div class="line">    &#125;;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>The Node function expects any number of arguments, as long as the last one is an error-first callback.  We need to pass in those arguments as well as the callback.  Let’s start with the latter.</p>
<p>Here’s where we reconcile the gap between a node-style callback and a promise-wrapped function.  Some major differences:</p>
<ul>
<li>On successful completion, the node function invokes the callback, passing in <code>null</code> for the first parameter and the function’s result as the second.  However, the promise system invokes the <code>Promise.resolve</code> in this situation, passing in the results.</li>
<li>The node function sends an error to the callback if something goes wrong, whereas the promise-wrapped function calls the <code>Promise.reject</code> method, optionally passing data.</li>
</ul>
<p>Let’s define a skeleton for the Node-style callback while using <code>reject</code> and <code>resolve</code> to handle both scenarios:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodeStyleCallback = <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    reject(err);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    resolve(data);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>nodeStyleCallback</code> is the function we want to be invoked after <code>nodeStyleFunction</code>, the function we’re promisifying, finishes doing its async work.  The function is essentially the same thing we’d pass into <code>nodeStyleFunction</code> as the final argument.</p>
<p>We can pass it directly into <code>nodeStyleFunction</code> like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> nodeStyleCallback = <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      reject(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      resolve(data);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  nodeStyleFunction(nodeStyleCallback);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Handling-arguments"><a href="#Handling-arguments" class="headerlink" title="Handling arguments"></a>Handling arguments</h3><p>But there’s just one problem.  We don’t know how many arguments our promisified function will take.  How do we pass in a variable number of arguments along with the callback into <code>nodeStyleFunction</code>?  In ES6 we could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="external">rest parameters</a>.  For this ES5 example, let’s do the following:</p>
<ul>
<li>Gather the arguments that are being passed to the promisified function we’re returning.  Use Array’s <code>slice</code> method to convert the array-<em>like</em> <code>arguments</code> object to a proper array.</li>
<li><code>push</code> the callback onto the end of the array.</li>
<li>Invoke our <code>nodeStyleFunction</code> with <code>Function.prototype.apply</code> since it takes an array of arguments.</li>
</ul>
<p>Here’s the entire <code>promisify</code> function so far, including the above steps for handling arguments:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promisify = <span class="function"><span class="keyword">function</span>(<span class="params">nodeStyleFunction</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      args.push(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          reject(err);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          resolve(data);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">      nodeStyleFunction.apply(<span class="literal">null</span>, args);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Let’s see our function in action.  Node’s <code>fs</code> file system library includes a number of asynchronous streaming operations that can be chained together by <code>promisify</code>.  Here’s what opening and then reading a file would look with callbacks:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// OPEN the file</span></div><div class="line">fs.open(<span class="string">'file.txt'</span>, <span class="string">'r'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.err(err);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="number">1024</span>);</div><div class="line"></div><div class="line">  <span class="comment">// READ the file</span></div><div class="line">  fs.read(file, buffer, <span class="number">0</span>, buffer.length, <span class="number">0</span>, </div><div class="line">           <span class="function"><span class="keyword">function</span>(<span class="params">err, bytes</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">throw</span> err &#125;;</div><div class="line">    <span class="comment">// do something with the bytes</span></div><div class="line">    ...</div><div class="line">    <span class="comment">// CLOSE the file</span></div><div class="line">    fs.close(file, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123; <span class="keyword">throw</span> err; &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Now it’s <code>promisify</code>‘s turn.  Let’s start by converting the various <code>fs</code> functions to their promisified versions:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> openAsync = promisify(fs.open);</div><div class="line"><span class="keyword">var</span> readAsync = promisify(fs.read);</div><div class="line"><span class="keyword">var</span> closeAsync = promisify(fs.close);</div></pre></td></tr></table></figure>
<p>And here’s the equivalent file-handling code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">openAsync(<span class="string">'file.txt'</span>, <span class="string">'r'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">    readAsync(file, buffer, <span class="number">0</span>, buffer.length, <span class="number">0</span>);</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">bytes</span>) </span>&#123;</div><div class="line">    <span class="comment">// do stuff with the bytes</span></div><div class="line">    closeAsync();</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(err);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>I think it’s a bit easier to see what exactly is happening in each stage of the open =&gt; read =&gt; close sequence.  I also like the fact that it will work with a huge class of functions.  Not to mention the fact that we can fine tune it for any other async functions we’d like to promisify.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;We have several choices when i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6 arrow functions and lexical this</title>
    <link href="http://yoursite.com/2016/11/19/ES6-arrow-functions-and-lexical-this/"/>
    <id>http://yoursite.com/2016/11/19/ES6-arrow-functions-and-lexical-this/</id>
    <published>2016-11-20T05:28:22.000Z</published>
    <updated>2016-11-30T09:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s take a look at one of the quirkiest behaviors in JavaScript.  We’ll start by examining the legacy version of the language’s interpretation of the keyword <code>this</code>.  Then we’ll consider some new behavior introduced by ES6’s arrow functions.  How are they different?  Which approach is more intuitive and/or useful?  Read on for insight!</p>
<p>Prior to ECMAScript 2015 (a.k.a. ES6), JavaScript used an uncommon approach to the evaluation of <code>this</code>.  It made object-orientation in a functional language difficult.  For object-oriented design, <code>this</code> serves a critical purpose in creating objects that display polymorphism.  The ECMAScript 5.1 specification interprets so-called <em>ThisBinding</em> in a manner often described as confusing and unintuitive.</p>
<p><em>ThisBinding</em> is one of several execution contexts employed by the JavaScript interpreter to bind values to symbols.  When passing functions as callbacks to other functions, the value of <code>this</code> at runtime might surprise you.  For example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cupcake</span>(<span class="params">type, frosting</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = type;</div><div class="line">  <span class="keyword">this</span>.frosting = frosting;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.announce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'And now, the moment you\'ve been waiting for! Presenting...'</span>);</div><div class="line"></div><div class="line">    setTimeout(<span class="keyword">this</span>._present, <span class="number">1500</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>._present = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'...a '</span> + <span class="keyword">this</span>.type +</div><div class="line">      <span class="string">' cupcake with '</span> + <span class="keyword">this</span>.frosting + <span class="string">' frosting'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> chocolateCupcake = <span class="keyword">new</span> Cupcake(<span class="string">'chocolate'</span>, <span class="string">'buttercream'</span>);</div><div class="line">chocolateCupcake.announce();</div></pre></td></tr></table></figure>
<p>Everything looks like it should work.  The <code>announce()</code> method is going to queue up some code for 1.5 seconds in the future.  The function it passes to <code>setTimeout</code> refers to some information about the cupcake.  These attributes are stored in that instance of the Cupcake object.  The helper function <code>_present()</code> is defined in the same scope as the member variables <code>this.type</code> and <code>this.frosting</code>.  So why do we get the following output?</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">And now, the moment you've been waiting for! Presenting...</div><div class="line">...a undefined cupcake with undefined frosting</div></pre></td></tr></table></figure>
<p>The problem is that when <code>present()</code> eventually goes off, the value of <code>this</code> is not this cupcake instance, even though <em>it really looks like it should be.</em>  After all, we’re defining <code>_present()</code> in the same block of code where we set the variables <code>this.type</code> and <code>this.frosting</code>.  In truth the value of <code>this</code> is decided later on, in the current execution context in which it was invoked.  In the case of <code>_present()</code>, when it’s invoked 1.5 seconds later, we’re actually in the global scope.  In that case, <code>this</code> refers to the global object <code>window</code>.</p>
<h2 id="Options-for-ThisBinding"><a href="#Options-for-ThisBinding" class="headerlink" title="Options for ThisBinding"></a>Options for ThisBinding</h2><h3 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h3><p>So how can we make the keyword <code>this</code> resolve to the thing we actually want and not <code>window</code>?  To write event-driven, asynchronous code we need our callbacks to know about the context in which they were defined, about the objects involved in the event.  If <code>this</code> were just like any other variable, we wouldn’t have anything to worry about.  In fact, assigning the value of <code>this</code> to a variable and then using <em>that variable</em> inside the callback provides one possible solution.  The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="external">closure feature</a> of the language, part of lexical scoping, makes this possible:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cupcake</span>(<span class="params">type, frosting</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = type;</div><div class="line">  <span class="keyword">this</span>.frosting = frosting;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.announce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'And now, the moment you\'ve been waiting for! Presenting...'</span>);</div><div class="line"></div><div class="line">    setTimeout(<span class="keyword">this</span>._present, <span class="number">1500</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>._present = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'...a '</span> + self.type +</div><div class="line">      <span class="string">' cupcake with '</span> + self.frosting + <span class="string">' frosting'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> chocolateCupcake = <span class="keyword">new</span> Cupcake(<span class="string">'chocolate'</span>, <span class="string">'buttercream'</span>);</div><div class="line">chocolateCupcake.announce();</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">And now, the moment you've been waiting for! Presenting...</div><div class="line">...a chocolate cupcake with buttercream frosting</div></pre></td></tr></table></figure>
<h3 id="the-bind-method"><a href="#the-bind-method" class="headerlink" title="the bind method"></a>the <code>bind</code> method</h3><p><code>Function.prototype.bind</code> allows us to use a specialized version of the function that bakes in arguments and the <code>this</code> binding.  When it’s invoked, the arguments are passed into the function as per usual.  Also, the function is called as if it were invoked in the same context as the scope in which it was defined before being passed as a callback.  Here’s an example of <code>bind</code> in action:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  this.announce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'And now, the moment you\'ve been waiting for! Presenting...'</span>);</div><div class="line"></div><div class="line">    setTimeout(<span class="keyword">this</span>._present.bind(<span class="keyword">this</span>), <span class="number">1500</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>._present = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'...a '</span> + <span class="keyword">this</span>.type +</div><div class="line">      <span class="string">' cupcake with '</span> + <span class="keyword">this</span>.frosting + <span class="string">' frosting'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">And now, the moment you've been waiting for! Presenting...</div><div class="line">...a chocolate cupcake with buttercream frosting</div></pre></td></tr></table></figure>
<h2 id="Enter-ES6-arrow-functions"><a href="#Enter-ES6-arrow-functions" class="headerlink" title="Enter ES6 arrow functions"></a>Enter ES6 arrow functions</h2><p>Since we use anonymous functions so frequently in JavaScript, the new fat arrow functions in the ECMAScript 2015 spec are most welcome.  They afford the following advantages:</p>
<ul>
<li>concise syntax</li>
<li>lexical binding of <code>this</code></li>
<li>several syntactic sugar features</li>
</ul>
<p>Let’s take a look at the first two in action:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">this.announce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'And now, the moment you\'ve been waiting for! Presenting...'</span>);</div><div class="line"></div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'...a '</span> + <span class="keyword">this</span>.type +</div><div class="line">      <span class="string">' cupcake with '</span> + <span class="keyword">this</span>.frosting + <span class="string">' frosting'</span>);</div><div class="line">  &#125;, <span class="number">1500</span>);</div><div class="line">&#125;;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><code>And now, the moment you&#39;ve been waiting for! Presenting...
...a chocolate cupcake with buttercream frosting</code></p>
<p>Here’s another quick refactor using an arrow function and showing off its implicit return in a concise function body (no curly braces):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.on(<span class="string">'eat'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.type + <span class="string">' cupcakes are delicious'</span>;</div><div class="line">&#125;).bind(<span class="keyword">this</span>));</div><div class="line"></div><div class="line"><span class="comment">// this ^^ becomes this:</span></div><div class="line"></div><div class="line"><span class="keyword">this</span>.on(<span class="string">'eat'</span>, () =&gt; (<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> cupcakes are delicious`</span>));</div></pre></td></tr></table></figure>
<p>Arrow functions make it easy to inline anonymous functions in all those places we need them, such as asynchronous callbacks, higher order functions and event handlers.  <code>this</code> works just like most people would expect.  And the best part is, we can still <code>.bind</code>,  <code>.call</code> , <code>apply</code> and otherwise use the old ES5 non-arrow functions to our heart’s content in ES6.  The specification lets you mix and match both styles, so use whichever suits the situation.</p>
<h3 id="caveats"><a href="#caveats" class="headerlink" title="caveats"></a>caveats</h3><p>Some libraries like jQuery and Backbone have their own strategies for  <code>this</code>, which use ES5’s interpretation.  For example, many jQuery callbacks use <code>$(this)</code> to pinpoint the target object out of the DOM.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#cupcake'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).append(<span class="string">'&lt;h1&gt;more HTML&lt;/h1&gt;'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>An arrow function would cause the selector above to fail, since the context isn’t what jQuery expects.  Backbone, on the other hand, passes around <code>this</code> as an additional parameter throughout its event system.  Arrow functions should work fine with the framework and probably make Backbone code more concise:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.collection.on(<span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.render();</div><div class="line">&#125;, <span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">// from this ^^ to this:</span></div><div class="line"></div><div class="line">myCollection.on(<span class="string">'add'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">this</span>.render();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Note that arrow functions can be invoked through <code>.call</code> and <code>.apply</code> but we can not pass in <code>this</code> as an argument, only regular variables.  Also, arrow functions do not have their own <code>arguments</code> object.  Rest parameters still work though.  For other quirks and features of arrow functions, see the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">MDN reference</a>.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I don’t think I’ve ever heard someone say something nice about legacy JavaScript’s specification for <code>this</code> binding.  I personally find the behavior counterintuitive but workable.  ES5’s notion of the keyword has its own logic and we must understand it.  But going forward, the ES6 arrow function gives us another tool, one that delivers a little logical and syntactic sugar for our event-driven, async code.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s take a look at one of the quirkiest behaviors in JavaScript.  We’ll start by examining the legacy version of the language’s interpr
    
    </summary>
    
    
  </entry>
  
</feed>
